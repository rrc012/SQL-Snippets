{  "prefix": "jobs",  "description": "",  "body": "use msdb;goset nocount on;declare @istepid       tinyint = null,     --if null fetch all the steps associated with a job, else fetch the specified step details tied to a job.        @iproxyid      tinyint = null,     --if 0 fetch only those jobs that have proxies associated with it.        @sfreqtype     varchar(10) = null, --daily/weekly/monthly etc        @ssubsystem    varchar(10) = null, --tsql/ssis/cmdexec/powershell etc        @sjobsnamelist varchar(1000) = '|', --if blank fetch all jobs, else fetch the specified job details. enter a comma-separated list of job names.        @icharposition tinyint;--used to hold list of sql agent job names to processif object_id('tempdb..#jobsnameslist') is not null drop table tempdb..#jobsnameslist;create table #jobsnameslist ( job_name varchar(128));--process listset @sjobsnamelist += ',';while charindex(',', @sjobsnamelist) &gt; 0begin	set @icharposition = charindex(',', @sjobsnamelist)	insert into #jobsnameslist (job_name)	select ltrim(rtrim(left(@sjobsnamelist, @icharposition - 1)));	set @sjobsnamelist = stuff(@sjobsnamelist, 1, @icharposition, '');end  -- while loop--select * from #jobsnameslist;select j.name as job_name,       px.name as proxy_name,       j.description as job_description,	  j.start_step_id,       js.step_id,       js.step_name,	  ss.name as schedule_name,       ft.freq_type,       fi.freq_interval,	  fst.freq_subday_type,/*              ss.freq_subday_interval,       ss.freq_relative_interval,       ss.freq_recurrence_factor,       ss.active_start_date,       ss.active_end_date,       ss.active_start_time,       ss.active_end_time,--*/       js.subsystem,       js.command,       pkg.ssis_package_path,       js.database_name,       js.output_file_name,       j.date_created as job_created_on,       j.date_modified as job_modified_on,       j.version_number as job_version_number,       ss.date_created as schedule_created_on,       ss.date_modified as schedule_modified_on,       ss.version_number as schedule_version_number  from dbo.sysjobs as j       inner join #jobsnameslist as jnl on j.name like coalesce(concat('%', jnl.job_name, '%'), j.name)       left join dbo.sysjobsteps as js on j.job_id = js.job_id       left join dbo.sysjobschedules as jss on j.job_id = jss.job_id       left join dbo.sysschedules as ss on jss.schedule_id = ss.schedule_id       left join dbo.sysproxies as px on js.proxy_id = px.proxy_id       --removing all the characters in cmd starting from cmd'" /server "*" /checkpointing off /reporting e' in the cmd to extract the name of the ssis package which is called by a step in a sql job       outer apply (select stuff(js.command, charindex('" /server', js.command), len(js.command), '') as cleanup1) as p1       --removing all instances of '"\' &amp; '/sql ' &amp; '\"' from cleanup1 to extract the name of the ssis package and the folder under which it is present       outer apply (select '\' + replace(replace(replace(replace(p1.cleanup1, '"\', ''), '/sql ', ''), '\"', ''), '"', '') as ssis_package_path) as pkg	  outer apply (select case ss.freq_relative_interval                                when 1  then 'first'                                when 2  then 'second'                                when 4  then 'third'                                when 8  then 'fourth'                                when 16 then 'last'                           end as freq_relative_interval                   ) as fri       outer apply (select case ss.freq_type                                when 1   then 'once'                                when 4   then 'daily'                                when 8   then 'weekly'                                when 16  then 'monthly'                                when 32  then 'monthly, relative'                                when 64  then 'starts when sql server agent service starts'                                when 128 then 'runs when computer is idle'                           end as freq_type                   ) as ft        outer apply (select case when ss.freq_type in (1, 64, 128) then 'unused'                                 --daily                                 when ss.freq_type = 4 then concat('every ', freq_interval, ' day(s)')                                 --weekly                                 when ss.freq_type = 8 then case ss.freq_interval                                                                 when 1  then 'every sunday of the week'                                                                 when 2  then 'every monday of the week'                                                                 when 4  then 'every tuesday of the week'                                                                 when 8  then 'every wednesday of the week'                                                                 when 16 then 'every thursday of the week'                                                                 when 32 then 'every friday of the week'                                                                 when 64 then 'every saturday of the week'                                                                 else 'multiple days in a week'                                                                 /*                                                                 when 3 (1+2) then every sunday, monday of the week													when 9 (1+4+8) then every sunday, tuesday, wednesday of the week													when 62 (2+4+8+16+32) then every sunday, monday, tuesday, wednesday, thursday &amp; friday of the week													....so on and so forth                                                                 */                                                            end                                 --monthly                                 when ss.freq_type = 16 then concat('on the ',                                                                    ss.freq_interval,                                                                    case ss.freq_interval                                                                         when 1  then 'st'                                                                         when 21 then 'st'                                                                         when 31 then 'st'                                                                         when 2  then 'nd'                                                                         when 22 then 'nd'                                                                         when 3  then 'rd'                                                                         when 23 then 'rd'                                                                         else 'th'                                                                    end,                                                                    ' day of the month')                                 --monthly, relative (also uses freq_relative_interval)                                 when ss.freq_type = 32 then  concat('on the ',                                                                     fri.freq_relative_interval,                                                                     space(1),                                                                     case ss.freq_interval                                                                          when 1  then 'sunday'                                                                          when 2  then 'monday'                                                                          when 3  then 'tuesday'                                                                          when 4  then 'wednesday'                                                                          when 5  then 'thursday'                                                                          when 6  then 'friday'                                                                          when 7  then 'saturday'                                                                          when 8  then 'day'                                                                          when 9  then 'weekday'                                                                          when 10 then 'weekend day'                                                                     end,                                                                     ' of the month'                                                                    )                            end as freq_interval                   ) as fi        outer apply (select stuff(stuff(right(replicate('0', 6) + cast(ss.active_start_time as varchar(6)), 6), 3, 0, ':'), 6, 0, ':') as active_start_time) as ast        outer apply (select case when ss.freq_subday_type = 2 then concat(' every ', freq_subday_interval, ' seconds starting at ', ast.active_start_time)                                 when ss.freq_subday_type = 4 then concat(' every ', freq_subday_interval, ' minutes starting at ', ast.active_start_time)                                 when ss.freq_subday_type = 8 then concat(' every ', freq_subday_interval, ' hours starting at ',   ast.active_start_time)                                 else ' starting at ' + ast.active_start_time                            end as freq_subday_type                    ) as fst where 1 = 1   and js.step_id &gt;= coalesce(@istepid, js.step_id)   and coalesce(ft.freq_type, '') like coalesce(concat('%', @sfreqtype, '%'), ft.freq_type)   and js.subsystem like coalesce(concat('%', @ssubsystem, '%'), js.subsystem)   and coalesce(px.proxy_id, 0) &gt; coalesce(@iproxyid, -1) order by j.name, js.step_id;"  <cursorpositionmarker>|</cursorpositionmarker>}