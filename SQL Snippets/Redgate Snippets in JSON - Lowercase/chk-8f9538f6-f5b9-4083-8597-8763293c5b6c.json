{
  "id": "8f9538f6-f5b9-4083-8597-8763293c5b6c",
  "prefix": "chk",
  "description": "Creates an extended event session, runs the code you want to test, extracts the output and then stops the session",
  "body": "/**\r\nBased on code by Phil Factor from https://www.red-gate.com/hub/product-learning/sql-prompt/testing-performance-individual-sql-statements-within-batch-using-sql-prompt\r\n**/\r\nif exists --if the session already exists, then delete it. we are assuming you've changed something\r\n  (\r\n  select * from sys.server_event_sessions\r\n    where server_event_sessions.name = 'checkingsqlstatements'\r\n  )\r\n  drop event session checkingsqlstatements on server;\r\ngo\r\ncreate event session checkingsqlstatements --call it what you wish, of course\r\non server\r\n  add event sqlserver.sql_statement_completed --we just have one event\r\n    (action (sqlserver.database_name, sqlserver.sql_text, sqlserver.plan_handle)-- and these global vars\r\n     where (sqlserver.like_i_sql_unicode_string(sqlserver.sql_text, n'--test these queries%'))\r\n\t --we just want the batch and nothing else so we put an identifying string at the start\r\n    )\r\n  add target package0.ring_buffer \r\n  --we don't need a more permanent record or a bucket count\r\nwith (startup_state = off);\r\ngo\r\nalter event session checkingsqlstatements on server state = start;\r\n--v-----the batch being tested starts here ------v\r\ngo --don't change this next line without changing the where clause above\r\n--test these queries\r\n-------------------------------------------------------------------\r\n\r\n$selectedtext$\r\n\r\n------------------------------------------------------------------\r\ngo\r\ndeclare @target_data xml =\r\n          (\r\n          select top 1 cast(xet.target_data as xml) as targetdata\r\n            from sys.dm_xe_session_targets as xet\r\n              inner join sys.dm_xe_sessions as xes\r\n                on xes.address = xet.event_session_address\r\n            where xes.name = 'checkingsqlstatements'\r\n              and xet.target_name = 'ring_buffer'\r\n          );\r\nselect \r\nconvert(datetime2,\r\n        switchoffset(convert(datetimeoffset,the.event_data.value('(@timestamp)[1]', 'datetime2')),\r\n\t\tdatename(tzoffset, sysdatetimeoffset()))) as datetime_local,\r\nconvert(decimal(6,3),round(the.event_data.value('(data[@name=\"duration\"]/value)[1]', 'bigint')/1000000.0,3,1))  as duration,\r\nthe.event_data.value('(data[@name=\"statement\"]/value)[1]', 'nvarchar(max)') as [statement],\r\n--the.event_data.value('(action[@name=\"sql_text\"]/value)[1]', 'nvarchar(max)') as sql_text,\r\n--the.event_data.value('(action[@name=\"database_name\"]/value)[1]', 'nvarchar(80)') as [database_name],\r\nqp.query_plan,\r\nthe.event_data.value('(data[@name=\"cpu_time\"]/value)[1]', 'bigint') as [cpu_time(microssecs)],\r\nthe.event_data.value('(data[@name=\"physical_reads\"]/value)[1]', 'bigint') as physical_reads,\r\nthe.event_data.value('(data[@name=\"logical_reads\"]/value)[1]', 'bigint') as logical_reads,\r\nthe.event_data.value('(data[@name=\"writes\"]/value)[1]', 'bigint') as writes,\r\nthe.event_data.value('(data[@name=\"row_count\"]/value)[1]', 'bigint') as row_count\r\n--the.event_data.value('(data[@name=\"last_row_count\"]/value)[1]', 'int') as last_row_count,\r\n--the.event_data.value('(data[@name=\"line_number\"]/value)[1]', 'int') as line_number,\r\n--the.event_data.value('(data[@name=\"offset\"]/value)[1]', 'int') as offset,\r\n--the.event_data.value('(data[@name=\"offset_end\"]/value)[1]', 'int') as offset_end,\r\n\r\nfrom @target_data.nodes('//ringbuffertarget/event') as the (event_data)\r\n  cross apply sys.dm_exec_query_plan(\r\n   convert(varbinary(64),--convert to valid plan handle\r\n          '0x' + the.event_data.value('(action[@name=\"plan_handle\"]/value)[1]', 'nvarchar(max)')\r\n\t\t  ,1)) as qp\r\n\r\nalter event session checkingsqlstatements on server state = stop;"
}